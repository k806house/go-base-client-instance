{"ast":null,"code":"var _jsxFileName = \"/Users/a19113494/Desktop/hack/go-base-client-instance/src/pages/GameBoard/GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Board from \"./components/Board/Board\";\nimport GameInfo from \"./components/GameInfo/GameInfo\";\nimport styled from \"styled-components\";\nimport { Header } from \"./components/Header\";\nimport Help from \"./components/Help/Help\";\nimport { hintHeatmapFull, hintHeatmapZone, markersClear, multipleHelp, setWinnerUser, setLoserUser, setBlocked, hintShowBest, setScoresWinner, hintBestMoves } from \"../../store/Board/actions\";\nimport { clearGameId } from \"../../store/GameCreate/actions\";\nimport { client, token } from '../../Socket.js';\nimport { HEATMAP_FULL, HEATMAP_ZONE_QUARTER } from \"./components/Help/types\";\nimport { Card } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  max-width: 1377px;\n  margin: 0 auto;\n`;\n_c = Wrapper;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  align-items: stretch;\n  height: calc(100vh - 129px);\n`;\n_c2 = Flex;\nconst Wrap = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(255,255,255,0.5);\n  z-index: 99999999;\n`;\n_c3 = Wrap;\n\nconst GameBoard = ({\n  history\n}) => {\n  _s();\n\n  const game_id = useSelector(state => state.createGame.id);\n  const blocked = useSelector(state => state.board.blocked);\n  const mapStones = useSelector(state => state.board.mapStones);\n  const [hint, setHint] = useState(false);\n  const [enemyPass, setEnemyPass] = useState(false);\n  const [lastMarkers, setLastMarkers] = useState(null);\n  const [helpType, setHelpType] = useState('');\n  const [activeHelpId, setActiveHelpId] = useState('');\n  const [multipleType, setMultipleType] = useState(false);\n  const [mapType, setMapType] = useState(false);\n  const [multipleHint, setMultipleHint] = useState({});\n  const [multipleCount, setMultipleCount] = useState([]);\n  const [turns, setTurns] = useState([]);\n  const [yourColor, setYourColor] = useState(\"white\");\n  const [coordinates, setCoordinates] = useState({});\n  const [you, setYou] = useState({});\n  const [opponent, setOpponent] = useState({});\n  const [stepMain, setStepMain] = useState(0);\n  const [stepTwo, setStepTwo] = useState(0);\n  const [stepColor, setStepColor] = useState('white');\n  const [classNames, setClassNames] = useState({});\n  const dispatch = useDispatch();\n  const [times, setTimes] = useState({\n    playerOne: 0,\n    playerTwo: 0\n  });\n  useEffect(() => {\n    if (Object.keys(multipleHint).length === multipleCount) {\n      dispatch(multipleHelp());\n      deleteCoordinates(multipleHint);\n      setHelpType('');\n      setMultipleHint({});\n    }\n  }, [multipleHint, multipleCount]);\n\n  if (game_id === null) {\n    history.push('/');\n  }\n\n  useEffect(() => {\n    if (game_id) {\n      client.send(JSON.stringify([5, 'go/game']));\n      client.send(JSON.stringify([7, \"go/game\", {\n        command: \"auth\",\n        token: localStorage.getItem('GoGameToken'),\n        game_id: game_id\n      }]));\n    }\n  }, []);\n\n  client.onmessage = function (e) {\n    setEnemyPass(false);\n\n    if (typeof e.data === 'string') {\n      let jsonData = JSON.parse(e.data);\n\n      if (jsonData.payload) {\n        if (jsonData.payload.currentMap) {\n          setCoordinates(mapMap(jsonData.payload.currentMap));\n        }\n\n        if (jsonData.payload.type === \"currentMap\") {\n          setYou(jsonData.payload.you);\n          setOpponent(jsonData.payload.opponent);\n        }\n\n        if (jsonData.payload.player) {\n          if (typeof jsonData.payload.player === 'string') {\n            setYourColor(jsonData.payload.player === 'w' ? 'white' : 'black');\n          }\n        }\n\n        if (jsonData.payload.type && jsonData.payload.type === 'endGame') {\n          let winner = jsonData.payload.winnerPlayer;\n          let loser = jsonData.payload.loserPlayer;\n          winner.finalScore = jsonData.payload.finalScore;\n          dispatch(setWinnerUser(winner));\n          dispatch(setLoserUser(loser));\n          history.push('/', {\n            from: \"Win\"\n          });\n          dispatch(clearGameId());\n        }\n\n        if (jsonData.payload.turn) {\n          setStepColor(jsonData.payload.turn);\n        }\n\n        if (jsonData.payload.move) {\n          setTurns(turns => [...turns, timeConverter(jsonData.time) + ': ' + jsonData.payload.move]);\n        }\n\n        if (jsonData.payload.type === 'newTurn') {\n          setLastMarkers({\n            [jsonData.payload.place]: 'circle'\n          });\n        }\n\n        if (jsonData.payload.moveType === 'pass') {\n          if (stepColor !== yourColor) {\n            setEnemyPass(true);\n          }\n        }\n\n        if (jsonData.payload.turnBlackEndedAt && jsonData.payload.turnWhiteEndedAt) {\n          setTimes({\n            playerOne: Math.floor((Number(jsonData.payload.turnBlackEndedAt) - new Date().getTime()) / 1000),\n            playerTwo: Math.floor((Number(jsonData.payload.turnWhiteEndedAt) - new Date().getTime()) / 1000)\n          });\n        }\n      }\n    }\n\n    dispatch(setBlocked(false));\n  };\n\n  const mapMap = map => {\n    let coords = {};\n    let alpha = 'ABCDEFGHJKLMNOPQRSTUV';\n    map.map((row, rowId) => row.map((cell, colId) => {\n      if (cell !== 0) {\n        let sign = alpha[rowId];\n        coords[`${sign}${colId + 1}`] = cell === -1 ? 'white' : 'black';\n      }\n    }));\n    let steMainTemp = 0;\n    let stepTwoTemp = 0;\n    Object.keys(coords).forEach(key => {\n      if (String(yourColor) === String(coords[key])) {\n        steMainTemp += 1;\n      } else {\n        stepTwoTemp += 1;\n      }\n    });\n    setStepMain(steMainTemp);\n    setStepTwo(stepTwoTemp);\n    return coords;\n  };\n\n  const move = coord => {\n    if (stepColor === yourColor) {\n      dispatch(markersClear());\n      setActiveHelpId(null);\n      setHelpType('');\n      dispatch(setBlocked(true));\n      client.send(JSON.stringify([7, \"go/game\", {\n        command: \"move\",\n        token: token,\n        place: coord.toString().toLowerCase(),\n        game_id: game_id\n      }]));\n    }\n  };\n\n  const pass = () => {\n    dispatch(markersClear());\n    setActiveHelpId(null);\n    setHelpType('');\n    dispatch(setBlocked(true));\n    client.send(JSON.stringify([7, \"go/game\", {\n      command: \"pass\",\n      token: token,\n      game_id: game_id\n    }]));\n  };\n\n  const resign = () => {\n    dispatch(setBlocked(true));\n    client.send(JSON.stringify([7, \"go/game\", {\n      command: \"resign\",\n      token: token,\n      game_id: game_id\n    }]));\n  };\n\n  const handleHelp = ({\n    type,\n    multipleHandleCount,\n    id,\n    count\n  }) => {\n    dispatch(markersClear());\n    setMultipleHint({});\n    setActiveHelpId(id);\n\n    if (type === \"single\") {\n      dispatch(setBlocked(true));\n      setHelpType(\"single\");\n      dispatch(hintBestMoves(game_id, count));\n    }\n\n    if (type === \"multiple\") {\n      setHelpType(\"multiple\");\n      setMultipleType(\"multiple\");\n      setMultipleCount(multipleHandleCount);\n    }\n\n    if (type === \"map\") {\n      dispatch(setBlocked(true));\n      setHelpType(\"map\");\n      setMapType(\"map\");\n\n      switch (id) {\n        case HEATMAP_FULL:\n          dispatch(hintHeatmapFull(game_id));\n          break;\n\n        case HEATMAP_ZONE_QUARTER:\n          dispatch(hintHeatmapZone(game_id, true));\n          break;\n      }\n    }\n\n    if (type === \"score\") {\n      dispatch(setBlocked(true));\n      dispatch(setScoresWinner(game_id));\n    }\n  };\n\n  const deleteCoordinates = hints => {\n    for (const key in coordinates) {\n      for (const keyHint in hints) {\n        if (key === keyHint) {\n          delete coordinates[key];\n        }\n      }\n    }\n  };\n\n  const timeConverter = UNIX_timestamp => {\n    let a = new Date(UNIX_timestamp);\n    let year = a.getFullYear().toString().substr(-2);\n    let month = ('0' + (a.getMonth() + 1)).slice(-2);\n    let date = ('0' + a.getDate()).slice(-2);\n    let hour = ('0' + a.getHours()).slice(-2);\n    let min = ('0' + a.getMinutes()).slice(-2);\n    let time = `${date}/${month}/${year} ${hour}:${min}`;\n    return time;\n  };\n\n  const setMultipleHintFunc = val => {\n    if (Object.keys(mapStones).length === multipleCount - 2) {\n      dispatch(markersClear());\n      setActiveHelpId(null);\n      setMultipleHint({});\n      setHelpType('');\n      dispatch(setBlocked(true));\n      dispatch(hintShowBest(game_id, Object.keys({ ...mapStones,\n        [val]: 'circle'\n      })));\n    } else {\n      setMultipleHint(mapStones);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      hint: hint,\n      setPass: pass,\n      viewPass: Object.keys(coordinates).length > 0,\n      history: history,\n      setHint: e => setHint(e),\n      setResign: resign,\n      helpType: helpType,\n      gameId: game_id,\n      view: stepColor === yourColor,\n      timeOut: () => alert('End Time'),\n      timer: stepColor === yourColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [blocked && /*#__PURE__*/_jsxDEV(Wrap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        lastMarkers: lastMarkers,\n        hint: hint,\n        setHint: setHint,\n        currentColor: stepColor,\n        setCurrentColor: setStepColor,\n        yourColor: yourColor,\n        helpType: helpType,\n        setMultipleHint: val => setMultipleHintFunc(val),\n        multipleHint: multipleHint,\n        multipleCount: multipleCount,\n        coordinates: coordinates,\n        setStonePosition: move,\n        setHelpType: setHelpType,\n        setMapType: setMapType,\n        setMultipleType: setMultipleType,\n        setActiveHelpId: setActiveHelpId,\n        classNames: classNames,\n        mapStones: mapStones\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), !hint ? /*#__PURE__*/_jsxDEV(GameInfo, {\n        you: you,\n        opponent: opponent,\n        stepColor: stepColor,\n        yourColor: yourColor,\n        turns: turns,\n        enemyPass: enemyPass,\n        stepMain: stepMain,\n        times: times,\n        stepTwo: stepTwo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Help, {\n        you: you,\n        opponent: opponent,\n        stepColor: stepColor,\n        yourColor: yourColor,\n        turns: turns,\n        enemyPass: enemyPass,\n        stepMain: stepMain,\n        stepTwo: stepTwo,\n        currentColor: yourColor,\n        setHint: setHint,\n        handleHelp: handleHelp,\n        helpType: helpType,\n        multipleType: multipleType,\n        mapType: mapType,\n        activeHelpId: activeHelpId,\n        times: times,\n        scores: stepColor !== yourColor ? false : true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameBoard, \"S5D4pNbNKgFCBXDFLQo+4JZRVtA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c4 = GameBoard;\nexport default GameBoard;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Flex\");\n$RefreshReg$(_c3, \"Wrap\");\n$RefreshReg$(_c4, \"GameBoard\");","map":{"version":3,"sources":["/Users/a19113494/Desktop/hack/go-base-client-instance/src/pages/GameBoard/GameBoard.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Board","GameInfo","styled","Header","Help","hintHeatmapFull","hintHeatmapZone","markersClear","multipleHelp","setWinnerUser","setLoserUser","setBlocked","hintShowBest","setScoresWinner","hintBestMoves","clearGameId","client","token","HEATMAP_FULL","HEATMAP_ZONE_QUARTER","Card","Wrapper","div","Flex","Wrap","GameBoard","history","game_id","state","createGame","id","blocked","board","mapStones","hint","setHint","enemyPass","setEnemyPass","lastMarkers","setLastMarkers","helpType","setHelpType","activeHelpId","setActiveHelpId","multipleType","setMultipleType","mapType","setMapType","multipleHint","setMultipleHint","multipleCount","setMultipleCount","turns","setTurns","yourColor","setYourColor","coordinates","setCoordinates","you","setYou","opponent","setOpponent","stepMain","setStepMain","stepTwo","setStepTwo","stepColor","setStepColor","classNames","setClassNames","dispatch","times","setTimes","playerOne","playerTwo","Object","keys","length","deleteCoordinates","push","send","JSON","stringify","command","localStorage","getItem","onmessage","e","data","jsonData","parse","payload","currentMap","mapMap","type","player","winner","winnerPlayer","loser","loserPlayer","finalScore","from","turn","move","timeConverter","time","place","moveType","turnBlackEndedAt","turnWhiteEndedAt","Math","floor","Number","Date","getTime","map","coords","alpha","row","rowId","cell","colId","sign","steMainTemp","stepTwoTemp","forEach","key","String","coord","toString","toLowerCase","pass","resign","handleHelp","multipleHandleCount","count","hints","keyHint","UNIX_timestamp","a","year","getFullYear","substr","month","getMonth","slice","date","getDate","hour","getHours","min","getMinutes","setMultipleHintFunc","val","alert"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Board from \"./components/Board/Board\";\nimport GameInfo from \"./components/GameInfo/GameInfo\";\nimport styled from \"styled-components\";\nimport { Header } from \"./components/Header\";\nimport Help from \"./components/Help/Help\";\nimport {\n  hintHeatmapFull,\n  hintHeatmapZone,\n  markersClear,\n  multipleHelp,\n  setWinnerUser,\n  setLoserUser,\n  setBlocked,\n  hintShowBest,\n  setScoresWinner,\n  hintBestMoves,\n} from \"../../store/Board/actions\";\n\nimport { clearGameId } from \"../../store/GameCreate/actions\";\n\nimport { client, token } from '../../Socket.js'\nimport {\n  HEATMAP_FULL,\n  HEATMAP_ZONE_QUARTER,\n} from \"./components/Help/types\";\n\nimport { Card } from 'antd';\n\nconst Wrapper = styled.div`\n  max-width: 1377px;\n  margin: 0 auto;\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  align-items: stretch;\n  height: calc(100vh - 129px);\n`;\nconst Wrap = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: rgba(255,255,255,0.5);\n  z-index: 99999999;\n`;\n\nconst GameBoard = ({ history }) => {\n\n  const game_id = useSelector((state) => state.createGame.id);\n  const blocked = useSelector((state) => state.board.blocked);\n  const mapStones = useSelector((state) => state.board.mapStones);\n\n  const [hint, setHint] = useState(false);\n  const [enemyPass, setEnemyPass] = useState(false);\n  const [lastMarkers, setLastMarkers] = useState(null);\n  const [helpType, setHelpType] = useState('');\n  const [activeHelpId, setActiveHelpId] = useState('');\n  const [multipleType, setMultipleType] = useState(false);\n  const [mapType, setMapType] = useState(false);\n  const [multipleHint, setMultipleHint] = useState({});\n  const [multipleCount, setMultipleCount] = useState([]);\n  const [turns, setTurns] = useState([]);\n  const [yourColor, setYourColor] = useState(\"white\");\n  const [coordinates, setCoordinates] = useState({});\n  const [you, setYou] = useState({});\n  const [opponent, setOpponent] = useState({});\n  const [stepMain, setStepMain] = useState(0)\n  const [stepTwo, setStepTwo] = useState(0)\n  const [stepColor, setStepColor] = useState('white')\n  const [classNames, setClassNames] = useState({})\n  const dispatch = useDispatch();\n  const [times, setTimes] = useState({playerOne: 0, playerTwo: 0})\n  \n\n  useEffect(() => {\n    if (Object.keys(multipleHint).length === multipleCount) {\n      dispatch(multipleHelp());\n      deleteCoordinates(multipleHint);\n      setHelpType('');\n      setMultipleHint({});\n    }\n  }, [multipleHint, multipleCount]);\n\n  if (game_id === null) {\n    history.push('/')\n  }\n\n  useEffect(() => {\n    if (game_id) {\n      client.send(JSON.stringify([5, 'go/game']));\n      client.send(JSON.stringify([7, \"go/game\", {command: \"auth\", token: localStorage.getItem('GoGameToken'), game_id: game_id}]));\n    }\n  },[])\n\n  client.onmessage = function(e) {\n    setEnemyPass(false)\n    if (typeof e.data === 'string') {\n      let jsonData = JSON.parse(e.data);\n      if (jsonData.payload) {\n        if (jsonData.payload.currentMap) {\n          setCoordinates(mapMap(jsonData.payload.currentMap))\n        }\n        if (jsonData.payload.type === \"currentMap\") {\n          setYou(jsonData.payload.you)\n          setOpponent(jsonData.payload.opponent)\n        }\n        if (jsonData.payload.player) {\n          if(typeof jsonData.payload.player === 'string') {\n            setYourColor(jsonData.payload.player === 'w' ? 'white' : 'black')\n          }\n        }\n        if (jsonData.payload.type && (jsonData.payload.type === 'endGame')) {\n          let winner = jsonData.payload.winnerPlayer\n          let loser = jsonData.payload.loserPlayer\n          winner.finalScore = jsonData.payload.finalScore;\n          dispatch(setWinnerUser(winner))\n          dispatch(setLoserUser(loser))\n          history.push('/', { from: \"Win\" })\n          dispatch(clearGameId())\n        }\n        if (jsonData.payload.turn) {\n          setStepColor(jsonData.payload.turn)\n        }\n        if (jsonData.payload.move) {\n          setTurns(turns => [...turns, timeConverter(jsonData.time)+': '+jsonData.payload.move])\n        }\n        if (jsonData.payload.type === 'newTurn') {\n          setLastMarkers({[jsonData.payload.place]:'circle'})\n        }\n        if (jsonData.payload.moveType === 'pass') {\n          if (stepColor !== yourColor) {\n            setEnemyPass(true)\n          }\n        }\n        if (jsonData.payload.turnBlackEndedAt && jsonData.payload.turnWhiteEndedAt) {\n          setTimes({\n            playerOne: Math.floor((Number(jsonData.payload.turnBlackEndedAt)  - new Date().getTime()) / 1000),\n            playerTwo: Math.floor((Number(jsonData.payload.turnWhiteEndedAt)  - new Date().getTime()) / 1000)\n          })\n        }\n      }\n    }\n    dispatch(setBlocked(false))\n  };\n\n  const mapMap = (map) => {\n    let coords = {};\n    let alpha = 'ABCDEFGHJKLMNOPQRSTUV'\n    map.map((row, rowId) => row.map((cell, colId) => {\n      if(cell !== 0)\n      {\n        let sign = alpha[rowId];\n        coords[`${sign}${(colId + 1)}`] = cell === -1 ? 'white' : 'black';\n      }\n    }))\n    let steMainTemp = 0\n    let stepTwoTemp = 0\n    Object.keys(coords).forEach((key) => {\n      if (String(yourColor) === String(coords[key])) {\n        steMainTemp += 1\n      } else {\n        stepTwoTemp += 1\n      }\n    })\n    setStepMain(steMainTemp)\n    setStepTwo(stepTwoTemp)\n    return coords;\n  }\n\n  const move = (coord) => {\n    if (stepColor === yourColor) {\n      dispatch(markersClear());\n      setActiveHelpId(null);\n      setHelpType('')\n      dispatch(setBlocked(true))\n      client.send(JSON.stringify([7, \"go/game\", {command: \"move\", token: token, place: coord.toString().toLowerCase(), game_id: game_id}]));\n    }\n  }\n\n  const pass = () => {\n    dispatch(markersClear());\n    setActiveHelpId(null);\n    setHelpType('')\n    dispatch(setBlocked(true))\n    client.send(JSON.stringify([7, \"go/game\", {command: \"pass\", token: token, game_id: game_id}]));\n  }\n\n  const resign = () => {\n    dispatch(setBlocked(true))\n    client.send(JSON.stringify([7, \"go/game\", {command: \"resign\", token: token, game_id: game_id}]));\n  }\n\n  const handleHelp = ({type, multipleHandleCount, id, count} ) => {\n    dispatch(markersClear());\n    setMultipleHint({});\n    setActiveHelpId(id);\n    if (type === \"single\") {\n      dispatch(setBlocked(true))\n      setHelpType(\"single\");\n      dispatch(hintBestMoves(game_id, count));\n    }\n    if (type === \"multiple\") {\n      setHelpType(\"multiple\");\n      setMultipleType(\"multiple\");\n      setMultipleCount(multipleHandleCount);\n    }\n    if (type === \"map\") {\n      dispatch(setBlocked(true))\n      setHelpType(\"map\");\n      setMapType(\"map\");\n      switch (id)\n      {\n        case HEATMAP_FULL:\n          dispatch(hintHeatmapFull(game_id));\n          break;\n        case HEATMAP_ZONE_QUARTER:\n          dispatch(hintHeatmapZone(game_id, true));\n          break;\n      }\n    }\n    if (type === \"score\") {\n      dispatch(setBlocked(true))\n      dispatch(setScoresWinner(game_id))\n    }\n  };\n\n  const deleteCoordinates = (hints) => {\n    for (const key in coordinates) {\n      for (const keyHint in hints) {\n        if(key === keyHint) {\n          delete coordinates[key];\n        }\n      }\n    }\n  }\n\n  const timeConverter = (UNIX_timestamp) => {\n    let a = new Date(UNIX_timestamp);\n    let year = a.getFullYear().toString().substr(-2);\n    let month = ('0' + (a.getMonth()+1)).slice(-2);\n    let date = ('0' + a.getDate()).slice(-2);\n    let hour = ('0' + a.getHours()).slice(-2);\n    let min = ('0' + a.getMinutes()).slice(-2);\n    let time = `${date}/${month}/${year} ${hour}:${min}`;\n    return time;\n  }\n\n  const setMultipleHintFunc = (val) => {\n    if (Object.keys(mapStones).length === (multipleCount - 2)) {\n      dispatch(markersClear());\n      setActiveHelpId(null);\n      setMultipleHint({})\n      setHelpType('');\n      dispatch(setBlocked(true))\n      dispatch(hintShowBest(game_id, Object.keys({...mapStones, [val]: 'circle'})))\n    } else {\n      setMultipleHint(mapStones)\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Header\n        hint={hint}\n        setPass={pass}\n        viewPass={Object.keys(coordinates).length > 0}\n        history={history}\n        setHint={(e) => setHint(e)}\n        setResign={resign}\n        helpType={helpType}\n        gameId={game_id}\n        view={stepColor === yourColor}\n        timeOut={() => alert('End Time')}\n        timer={stepColor === yourColor}\n      />\n      <Flex>\n        {blocked && (\n          <Wrap />\n        )}\n        <Board\n          lastMarkers={lastMarkers}\n          hint={hint}\n          setHint={setHint}\n          currentColor={stepColor}\n          setCurrentColor={setStepColor}\n          yourColor={yourColor}\n          helpType={helpType}\n          setMultipleHint={(val) => setMultipleHintFunc(val)}\n          multipleHint={multipleHint}\n          multipleCount={multipleCount}\n          coordinates={coordinates}\n          setStonePosition={move}\n          setHelpType={setHelpType}\n          setMapType={setMapType}\n          setMultipleType={setMultipleType}\n          setActiveHelpId={setActiveHelpId}\n          classNames={classNames}\n          mapStones={mapStones}\n        />\n        {!hint ? (\n          <GameInfo\n            you={you}\n            opponent={opponent}\n            stepColor={stepColor}\n            yourColor={yourColor}\n            turns={turns}\n            enemyPass={enemyPass}\n            stepMain={stepMain}\n            times={times}\n            stepTwo={stepTwo} />\n        ) : (\n          <Help\n            you={you}\n            opponent={opponent}\n            stepColor={stepColor}\n            yourColor={yourColor}\n            turns={turns}\n            enemyPass={enemyPass}\n            stepMain={stepMain}\n            stepTwo={stepTwo}\n            currentColor={yourColor}\n            setHint={setHint}\n            handleHelp={handleHelp}\n            helpType={helpType}\n            multipleType={multipleType}\n            mapType={mapType}\n            activeHelpId={activeHelpId}\n            times={times}\n            scores={stepColor !== yourColor ? false : true}\n          />\n        )}\n      </Flex>\n    </Wrapper>\n  );\n};\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}